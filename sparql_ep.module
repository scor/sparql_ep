<?php
// $Id:  $

/**
 * Implements hook_menu().
 */
function sparql_ep_menu() {
  // @todo use access RDF data permission instead of access content.
  $items['sparql'] = array(
    'title' => 'SPARQL endpoint',
    'page callback' => 'sparql_ep_sparql_endpoint',
    'access arguments' => array('access content'),
  );
  $items['sparql_ep_index'] = array(
    'title' => 'Build RDF index',
    'page callback' => 'sparql_ep_index_rdf',
    'access arguments' => array('access content'),
  );
  return $items;
}

function sparql_ep_initialize($type = 'store') {
  $db = $GLOBALS['databases']['default']['default'];
  $config = array(
    /* db */
    'db_name' => $db['database'],
    'db_user' => $db['username'],
    'db_pwd' => $db['password'],
    /* store */
    'store_name' => 'sparql_ep_arc2',

    /* endpoint */
    'endpoint_features' => array(
      'select', 'construct', 'ask', 'describe',
      'load', 'insert', 'delete',
      'dump' /* dump is a special command for streaming SPOG export */
    ),
    'endpoint_timeout' => 60, /* not implemented in ARC2 preview */
    'endpoint_read_key' => '', /* optional */
    'endpoint_write_key' => 'somekey', /* optional */
    'endpoint_max_limit' => 500, /* optional */
  );

  /* instantiation */
  if ($type == 'endpoint') {
    $store = ARC2::getStoreEndpoint($config);
  }
  else {
    $store = ARC2::getStore($config);
  }
  if (!$store->isSetUp()) {
    $store->setUp();
  }
  return $store;
}

function sparql_ep_index_rdf() {
  // Instantiate the ARC2 local store.
  $store = sparql_ep_initialize();

  // Emtpy the local store.
  // FIXME optimize by doing this only when creating/saving a node.
  $store->reset();

  // Index all the node ids which are published.
  $query = db_select('node', 'n')->extend('PagerDefault')->extend('TableSort');
  $query->condition('n.status', 1);
  $nids = $query
    ->fields('n',array('nid'))
    ->limit(500)
    ->execute()
    ->fetchCol();
  $nodes = node_load_multiple($nids);

  foreach ($nodes as $node) {
    $rdf = rdfx_build_rdf_node($node);
    $store->insert($rdf->index, $rdf->uri);
  }

  // Index all the user ids.
  $query = db_select('users', 'u')->extend('PagerDefault')->extend('TableSort');
  $query->condition('u.uid', 0, '<>');
  $uids = $query
    ->fields('u', array('uid'))
    ->limit(500)
    ->execute()
    ->fetchCol();

  $users = user_load_multiple($uids);
  foreach ($users as $user) {
    $rdf = rdfx_build_rdf_user($user);
    $store->insert($rdf->index, $rdf->uri);
  }

  // Index all the terms ids.
  $query = db_select('taxonomy_term_data', 't')->extend('PagerDefault')->extend('TableSort');
//  $query->condition('u.uid', 0, '<>');
  $uids = $query
    ->fields('t', array('tid'))
    ->limit(500)
    ->execute()
    ->fetchCol();

  $users = taxonomy_term_load_multiple($uids);
  foreach ($users as $user) {
    $rdf = rdfx_build_rdf_term($user);
    $store->insert($rdf->index, $rdf->uri);
  }


  return t('The RDF index of the site has been rebuilt. Browse to the <a href="@endpoint">SPARQL endpoint</a> to query it.', array('@endpoint' => url('sparql')));
}

function sparql_ep_sparql_endpoint() {
  // FIXME add all the ns in the default SPARQL query
  // patch to be committed to ARC2.
  $nss = rdf_get_namespaces();
  global $default_p;
  // @temp remove some less used prefixes.
  unset($nss['sioct']);
  unset($nss['rss']);
  $nss['site'] = url('', array('absolute' => TRUE));
  foreach($nss as $prefix => $ns) {
    $default_p .= "PREFIX $prefix: <" . $ns . ">\n";
  }

  // Instantiate the ARC2 SPARQL endpoint.
  $ep = sparql_ep_initialize('endpoint');
  $ep->go();
}
